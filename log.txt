richi@Touan-Richi-Zbook-G11:~/4096C$ make production
üßπ Cleaning build artifacts...
‚úÖ Clean completed!
üîß Compiling rsa_4096_bigint.c...
gcc -Wall -Wextra -O3 -DNDEBUG -DLOG_LEVEL=2 -std=c99 -fstack-protector-strong -D_FORTIFY_SOURCE=2 -c rsa_4096_bigint.c -o rsa_4096_bigint.o
üîß Compiling rsa_4096_arithmetic.c...
gcc -Wall -Wextra -O3 -DNDEBUG -DLOG_LEVEL=2 -std=c99 -fstack-protector-strong -D_FORTIFY_SOURCE=2 -c rsa_4096_arithmetic.c -o rsa_4096_arithmetic.o
üîß Compiling rsa_4096_montgomery.c (COMPLETE REDC)...
gcc -Wall -Wextra -O3 -DNDEBUG -DLOG_LEVEL=2 -std=c99 -fstack-protector-strong -D_FORTIFY_SOURCE=2 -c rsa_4096_montgomery.c -o rsa_4096_montgomery.o
üîß Compiling rsa_4096_core.c...
gcc -Wall -Wextra -O3 -DNDEBUG -DLOG_LEVEL=2 -std=c99 -fstack-protector-strong -D_FORTIFY_SOURCE=2 -c rsa_4096_core.c -o rsa_4096_core.o
üîß Compiling rsa_4096_tests.c...
gcc -Wall -Wextra -O3 -DNDEBUG -DLOG_LEVEL=2 -std=c99 -fstack-protector-strong -D_FORTIFY_SOURCE=2 -c rsa_4096_tests.c -o rsa_4096_tests.o
üîß Compiling main.c...
gcc -Wall -Wextra -O3 -DNDEBUG -DLOG_LEVEL=2 -std=c99 -fstack-protector-strong -D_FORTIFY_SOURCE=2 -c main.c -o main.o
üîó Linking RSA-4096 executable...
gcc -Wall -Wextra -O3 -DNDEBUG -DLOG_LEVEL=2 -std=c99 -fstack-protector-strong -D_FORTIFY_SOURCE=2 -o rsa_4096 rsa_4096_bigint.o rsa_4096_arithmetic.o rsa_4096_montgomery.o rsa_4096_core.o rsa_4096_tests.o main.o -lm
‚úÖ RSA-4096 executable created successfully
üîß Building test_rsa_4096_real...
gcc -Wall -Wextra -O3 -DNDEBUG -DLOG_LEVEL=2 -std=c99 -fstack-protector-strong -D_FORTIFY_SOURCE=2 -o test_rsa_4096_real rsa_4096_bigint.o rsa_4096_arithmetic.o rsa_4096_montgomery.o rsa_4096_core.o rsa_4096_tests.o test_rsa_4096_real.c -lm
‚úÖ Test executable created successfully
üß™ Running basic verification tests...
./rsa_4096 verify
[main:16] Starting RSA-4096 application
[main:22] Running verification mode (hex)
===============================================
RSA-4096 Verification Tests (BUGS FIXED)
===============================================
Date: 2025-07-29 14:58:04 UTC
User: RSAhardcore

Test Parameters:
  Modulus (n): 35
  Public Exponent (e): 5
  Private Exponent (d): 5

RSA Parameter Verification:
  n = 35 = 5 √ó 7
  œÜ(n) = œÜ(35) = (5-1) √ó (7-1) = 4 √ó 6 = 24
  e = 5, gcd(5, 24) = 1 ‚úì
  d = 5, e √ó d = 5 √ó 5 = 25 ‚â° 1 (mod 24) ‚úì

Expected Results (Manual Calculation):
[MANUAL CALC] Computing 2^5 mod 35
[MANUAL CALC] Step 1: result = 2
[MANUAL CALC] Step 2: result = 4
[MANUAL CALC] Step 3: result = 8
[MANUAL CALC] Step 4: result = 16
[MANUAL CALC] Step 5: result = 32
[MANUAL CALC] Final result: 32
[MANUAL CALC] Computing 3^5 mod 35
[MANUAL CALC] Step 1: result = 3
[MANUAL CALC] Step 2: result = 9
[MANUAL CALC] Step 3: result = 27
[MANUAL CALC] Step 4: result = 11
[MANUAL CALC] Step 5: result = 33
[MANUAL CALC] Final result: 33
[MANUAL CALC] Computing 4^5 mod 35
[MANUAL CALC] Step 1: result = 4
[MANUAL CALC] Step 2: result = 16
[MANUAL CALC] Step 3: result = 29
[MANUAL CALC] Step 4: result = 11
[MANUAL CALC] Step 5: result = 9
[MANUAL CALC] Final result: 9
  Message 2: encrypt to 32
  Message 3: encrypt to 33
  Message 4: encrypt to 9

‚úÖ Key structures initialized properly
[MONTGOMERY_COMPLETE] Initializing context for 6-bit modulus
[MONTGOMERY_COMPLETE] ‚úì R > n verified
[MONTGOMERY_COMPLETE] ‚úì n' = 0x75075075 computed successfully
[MONTGOMERY_COMPLETE] Computing R^(-1) mod n...
[EXT_GCD_FULL] Computing 3-word^(-1) mod 1-word
[EXT_GCD_FULL] Small modulus optimization
[EXT_GCD_FULL] Computing 16^(-1) mod 35
[EXT_GCD_FULL] Found inverse by trial: 11
[MONTGOMERY_COMPLETE] Computing R^2 mod n...
[MONTGOMERY_COMPLETE] ‚úÖ Context initialization completed successfully
[MONTGOMERY_COMPLETE] Parameters: n_words=1, r_words=2, n'=0x75075075, ACTIVE
[MONTGOMERY_COMPLETE] Initializing context for 6-bit modulus
[MONTGOMERY_COMPLETE] ‚úì R > n verified
[MONTGOMERY_COMPLETE] ‚úì n' = 0x75075075 computed successfully
[MONTGOMERY_COMPLETE] Computing R^(-1) mod n...
[EXT_GCD_FULL] Computing 3-word^(-1) mod 1-word
[EXT_GCD_FULL] Small modulus optimization
[EXT_GCD_FULL] Computing 16^(-1) mod 35
[EXT_GCD_FULL] Found inverse by trial: 11
[MONTGOMERY_COMPLETE] Computing R^2 mod n...
[MONTGOMERY_COMPLETE] ‚úÖ Context initialization completed successfully
[MONTGOMERY_COMPLETE] Parameters: n_words=1, r_words=2, n'=0x75075075, ACTIVE
‚úÖ RSA keys loaded successfully

=== Test Vector 1: message = "2" ===
üîê Encrypting message "2"...
[MONT_EXP_COMPLETE] Complete Montgomery exponentiation
[MONT_TO_COMPLETE] Converting to Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000016, n' = 0x75075075, m = 0x0ea0ea0e
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x2
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_TO_COMPLETE] Converting to Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000000b, n' = 0x75075075, m = 0x07507507
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Starting square-and-multiply
[MONT_EXP_COMPLETE] Processing 3 exponent bits
[MONT_EXP_COMPLETE] Bit 0 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000002, n' = 0x75075075, m = 0xea0ea0ea
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x20
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 0)
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000004, n' = 0x75075075, m = 0xd41d41d4
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1d
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Progress: bit 0/3 (0.0%)
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 1)
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000349, n' = 0x75075075, m = 0x7507505d
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x10
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Bit 2 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000200, n' = 0x75075075, m = 0x0ea0ea00
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x2
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Converting result back from Montgomery form
[MONT_FROM_COMPLETE] Converting from Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000002, n' = 0x75075075, m = 0xea0ea0ea
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x20
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] ‚úÖ Complete Montgomery exponentiation finished
   Encrypted (hex): "20"
   Encrypted (decimal): 32
   Expected (decimal): 32
‚úÖ Encryption verification: PASS
üîì Decrypting "20"...
[MONT_EXP_COMPLETE] Complete Montgomery exponentiation
[MONT_TO_COMPLETE] Converting to Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000160, n' = 0x75075075, m = 0xea0ea0e0
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x20
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_TO_COMPLETE] Converting to Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000000b, n' = 0x75075075, m = 0x07507507
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Starting square-and-multiply
[MONT_EXP_COMPLETE] Processing 3 exponent bits
[MONT_EXP_COMPLETE] Bit 0 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000020, n' = 0x75075075, m = 0xa0ea0ea0
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x16
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 0)
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000400, n' = 0x75075075, m = 0x1d41d400
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x4
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Progress: bit 0/3 (0.0%)
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 1)
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000010, n' = 0x75075075, m = 0x50750750
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0xb
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Bit 2 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x000000f2, n' = 0x75075075, m = 0xa0ea0e9a
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x16
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Converting result back from Montgomery form
[MONT_FROM_COMPLETE] Converting from Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000016, n' = 0x75075075, m = 0x0ea0ea0e
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x2
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] ‚úÖ Complete Montgomery exponentiation finished
   Decrypted: "2"
   Expected: "2"
‚úÖ Round-trip Result: PASS

=== Test Vector 2: message = "3" ===
üîê Encrypting message "3"...
[MONT_EXP_COMPLETE] Complete Montgomery exponentiation
[MONT_TO_COMPLETE] Converting to Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000021, n' = 0x75075075, m = 0x15f15f15
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x3
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_TO_COMPLETE] Converting to Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000000b, n' = 0x75075075, m = 0x07507507
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Starting square-and-multiply
[MONT_EXP_COMPLETE] Processing 3 exponent bits
[MONT_EXP_COMPLETE] Bit 0 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000003, n' = 0x75075075, m = 0x5f15f15f
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0xd
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 0)
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000009, n' = 0x75075075, m = 0x1d41d41d
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x4
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Progress: bit 0/3 (0.0%)
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 1)
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000010, n' = 0x75075075, m = 0x50750750
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0xb
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Bit 2 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000008f, n' = 0x75075075, m = 0x5f15f15b
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0xd
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Converting result back from Montgomery form
[MONT_FROM_COMPLETE] Converting from Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000000d, n' = 0x75075075, m = 0xf15f15f1
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x21
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] ‚úÖ Complete Montgomery exponentiation finished
   Encrypted (hex): "21"
   Encrypted (decimal): 33
   Expected (decimal): 33
‚úÖ Encryption verification: PASS
üîì Decrypting "21"...
[MONT_EXP_COMPLETE] Complete Montgomery exponentiation
[MONT_TO_COMPLETE] Converting to Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000016b, n' = 0x75075075, m = 0xf15f15e7
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x21
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_TO_COMPLETE] Converting to Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000000b, n' = 0x75075075, m = 0x07507507
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Starting square-and-multiply
[MONT_EXP_COMPLETE] Processing 3 exponent bits
[MONT_EXP_COMPLETE] Bit 0 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000021, n' = 0x75075075, m = 0x15f15f15
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x3
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 0)
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000441, n' = 0x75075075, m = 0xd41d41b5
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1d
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Progress: bit 0/3 (0.0%)
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 1)
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000349, n' = 0x75075075, m = 0x7507505d
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x10
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Bit 2 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000030, n' = 0x75075075, m = 0xf15f15f0
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x21
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Converting result back from Montgomery form
[MONT_FROM_COMPLETE] Converting from Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000021, n' = 0x75075075, m = 0x15f15f15
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x3
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] ‚úÖ Complete Montgomery exponentiation finished
   Decrypted: "3"
   Expected: "3"
‚úÖ Round-trip Result: PASS

=== Test Vector 3: message = "4" ===
üîê Encrypting message "4"...
[MONT_EXP_COMPLETE] Complete Montgomery exponentiation
[MONT_TO_COMPLETE] Converting to Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000002c, n' = 0x75075075, m = 0x1d41d41c
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x4
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_TO_COMPLETE] Converting to Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000000b, n' = 0x75075075, m = 0x07507507
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Starting square-and-multiply
[MONT_EXP_COMPLETE] Processing 3 exponent bits
[MONT_EXP_COMPLETE] Bit 0 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000004, n' = 0x75075075, m = 0xd41d41d4
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1d
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 0)
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000010, n' = 0x75075075, m = 0x50750750
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0xb
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Progress: bit 0/3 (0.0%)
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 1)
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000079, n' = 0x75075075, m = 0x5075074d
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0xb
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Bit 2 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000013f, n' = 0x75075075, m = 0xd41d41cb
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1d
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Converting result back from Montgomery form
[MONT_FROM_COMPLETE] Converting from Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000001d, n' = 0x75075075, m = 0x41d41d41
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x9
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] ‚úÖ Complete Montgomery exponentiation finished
   Encrypted (hex): "9"
   Encrypted (decimal): 9
   Expected (decimal): 9
‚úÖ Encryption verification: PASS
üîì Decrypting "9"...
[MONT_EXP_COMPLETE] Complete Montgomery exponentiation
[MONT_TO_COMPLETE] Converting to Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000063, n' = 0x75075075, m = 0x41d41d3f
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x9
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_TO_COMPLETE] Converting to Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000000b, n' = 0x75075075, m = 0x07507507
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Starting square-and-multiply
[MONT_EXP_COMPLETE] Processing 3 exponent bits
[MONT_EXP_COMPLETE] Bit 0 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000009, n' = 0x75075075, m = 0x1d41d41d
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x4
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 0)
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000051, n' = 0x75075075, m = 0x07507505
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Progress: bit 0/3 (0.0%)
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 1)
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000001, n' = 0x75075075, m = 0x75075075
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x10
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Bit 2 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000040, n' = 0x75075075, m = 0x41d41d40
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x9
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Converting result back from Montgomery form
[MONT_FROM_COMPLETE] Converting from Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000009, n' = 0x75075075, m = 0x1d41d41d
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x4
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] ‚úÖ Complete Montgomery exponentiation finished
   Decrypted: "4"
   Expected: "4"
‚úÖ Round-trip Result: PASS

===============================================
Verification Summary:
  ‚úÖ Tests passed: 3/3
  üéâ Overall result: ALL TESTS PASSED!
===============================================
üß™ Running large key tests...
./rsa_4096 test
[main:16] Starting RSA-4096 application
[main:26] Running large RSA key testing
===============================================
RSA Large Key Testing - ENHANCED
===============================================
Date: 2025-07-29 14:58:04 UTC
User: RSAhardcore

Testing with larger modulus (8-bit): n = 143 = 11 √ó 13
œÜ(n) = 120, using e = 7, d = 103

[MONTGOMERY_COMPLETE] Initializing context for 8-bit modulus
[MONTGOMERY_COMPLETE] ‚úì R > n verified
[MONTGOMERY_COMPLETE] ‚úì n' = 0x055ee191 computed successfully
[MONTGOMERY_COMPLETE] Computing R^(-1) mod n...
[EXT_GCD_FULL] Computing 3-word^(-1) mod 1-word
[EXT_GCD_FULL] Small modulus optimization
[EXT_GCD_FULL] Computing 16^(-1) mod 143
[EXT_GCD_FULL] Found inverse by trial: 9
[MONTGOMERY_COMPLETE] Computing R^2 mod n...
[MONTGOMERY_COMPLETE] ‚úÖ Context initialization completed successfully
[MONTGOMERY_COMPLETE] Parameters: n_words=1, r_words=2, n'=0x055ee191, ACTIVE
[MONTGOMERY_COMPLETE] Initializing context for 8-bit modulus
[MONTGOMERY_COMPLETE] ‚úì R > n verified
[MONTGOMERY_COMPLETE] ‚úì n' = 0x055ee191 computed successfully
[MONTGOMERY_COMPLETE] Computing R^(-1) mod n...
[EXT_GCD_FULL] Computing 3-word^(-1) mod 1-word
[EXT_GCD_FULL] Small modulus optimization
[EXT_GCD_FULL] Computing 16^(-1) mod 143
[EXT_GCD_FULL] Found inverse by trial: 9
[MONTGOMERY_COMPLETE] Computing R^2 mod n...
[MONTGOMERY_COMPLETE] ‚úÖ Context initialization completed successfully
[MONTGOMERY_COMPLETE] Parameters: n_words=1, r_words=2, n'=0x055ee191, ACTIVE
‚úÖ Large keys loaded successfully
‚ÑπÔ∏è  Montgomery REDC is disabled (fallback to standard arithmetic)

üîê Testing encryption/decryption with message: 42
[MONT_EXP_COMPLETE] Complete Montgomery exponentiation
[MONT_TO_COMPLETE] Converting to Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000128a, n' = 0x055ee191, m = 0x9101ca2a
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x51
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_TO_COMPLETE] Converting to Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000071, n' = 0x055ee191, m = 0x5ee19101
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x35
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Starting square-and-multiply
[MONT_EXP_COMPLETE] Processing 3 exponent bits
[MONT_EXP_COMPLETE] Bit 0 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x000010c5, n' = 0x055ee191, m = 0x101ca495
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x9
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 0)
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x000019a1, n' = 0x055ee191, m = 0xa4b30531
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x5c
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Progress: bit 0/3 (0.0%)
[MONT_EXP_COMPLETE] Bit 1 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000033c, n' = 0x055ee191, m = 0x5ee190fc
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x35
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 1)
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00002110, n' = 0x055ee191, m = 0x9101ca10
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x51
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Bit 2 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x000010c5, n' = 0x055ee191, m = 0x101ca495
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x9
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Converting result back from Montgomery form
[MONT_FROM_COMPLETE] Converting from Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000009, n' = 0x055ee191, m = 0x3055ee19
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1b
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] ‚úÖ Complete Montgomery exponentiation finished
   Encrypted: 27
[MONT_EXP_COMPLETE] Complete Montgomery exponentiation
[MONT_TO_COMPLETE] Converting to Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000beb, n' = 0x055ee191, m = 0x01ca4b1b
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_TO_COMPLETE] Converting to Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000071, n' = 0x055ee191, m = 0x5ee19101
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x35
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Starting square-and-multiply
[MONT_EXP_COMPLETE] Processing 7 exponent bits
[MONT_EXP_COMPLETE] Bit 0 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000035, n' = 0x055ee191, m = 0x1ca4b305
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x10
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 0)
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000001, n' = 0x055ee191, m = 0x055ee191
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x3
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Progress: bit 0/7 (0.0%)
[MONT_EXP_COMPLETE] Bit 1 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000030, n' = 0x055ee191, m = 0x01ca4b30
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 1)
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000009, n' = 0x055ee191, m = 0x3055ee19
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1b
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Bit 2 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000001b, n' = 0x055ee191, m = 0x9101ca4b
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x51
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 2)
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x000002d9, n' = 0x055ee191, m = 0x4b3055e9
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x2a
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 3)
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x000006e4, n' = 0x055ee191, m = 0x01ca4b24
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 4)
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000001, n' = 0x055ee191, m = 0x055ee191
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x3
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Bit 5 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x000000f3, n' = 0x055ee191, m = 0x19101ca3
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0xe
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000009, n' = 0x055ee191, m = 0x3055ee19
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1b
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Bit 6 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000017a, n' = 0x055ee191, m = 0xee19101a
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x85
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Converting result back from Montgomery form
[MONT_FROM_COMPLETE] Converting from Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000085, n' = 0x055ee191, m = 0xca4b3055
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x71
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] ‚úÖ Complete Montgomery exponentiation finished
   Decrypted: 113
‚ùå Large key test FAILED
make: *** [Makefile:64: run_basic_tests] Error 255
richi@Touan-Richi-Zbook-G11:~/4096C$ ./rsa_4096 verify
[main:16] Starting RSA-4096 application
[main:22] Running verification mode (hex)
===============================================
RSA-4096 Verification Tests (BUGS FIXED)
===============================================
Date: 2025-07-29 14:58:06 UTC
User: RSAhardcore

Test Parameters:
  Modulus (n): 35
  Public Exponent (e): 5
  Private Exponent (d): 5

RSA Parameter Verification:
  n = 35 = 5 √ó 7
  œÜ(n) = œÜ(35) = (5-1) √ó (7-1) = 4 √ó 6 = 24
  e = 5, gcd(5, 24) = 1 ‚úì
  d = 5, e √ó d = 5 √ó 5 = 25 ‚â° 1 (mod 24) ‚úì

Expected Results (Manual Calculation):
[MANUAL CALC] Computing 2^5 mod 35
[MANUAL CALC] Step 1: result = 2
[MANUAL CALC] Step 2: result = 4
[MANUAL CALC] Step 3: result = 8
[MANUAL CALC] Step 4: result = 16
[MANUAL CALC] Step 5: result = 32
[MANUAL CALC] Final result: 32
[MANUAL CALC] Computing 3^5 mod 35
[MANUAL CALC] Step 1: result = 3
[MANUAL CALC] Step 2: result = 9
[MANUAL CALC] Step 3: result = 27
[MANUAL CALC] Step 4: result = 11
[MANUAL CALC] Step 5: result = 33
[MANUAL CALC] Final result: 33
[MANUAL CALC] Computing 4^5 mod 35
[MANUAL CALC] Step 1: result = 4
[MANUAL CALC] Step 2: result = 16
[MANUAL CALC] Step 3: result = 29
[MANUAL CALC] Step 4: result = 11
[MANUAL CALC] Step 5: result = 9
[MANUAL CALC] Final result: 9
  Message 2: encrypt to 32
  Message 3: encrypt to 33
  Message 4: encrypt to 9

‚úÖ Key structures initialized properly
[MONTGOMERY_COMPLETE] Initializing context for 6-bit modulus
[MONTGOMERY_COMPLETE] ‚úì R > n verified
[MONTGOMERY_COMPLETE] ‚úì n' = 0x75075075 computed successfully
[MONTGOMERY_COMPLETE] Computing R^(-1) mod n...
[EXT_GCD_FULL] Computing 3-word^(-1) mod 1-word
[EXT_GCD_FULL] Small modulus optimization
[EXT_GCD_FULL] Computing 16^(-1) mod 35
[EXT_GCD_FULL] Found inverse by trial: 11
[MONTGOMERY_COMPLETE] Computing R^2 mod n...
[MONTGOMERY_COMPLETE] ‚úÖ Context initialization completed successfully
[MONTGOMERY_COMPLETE] Parameters: n_words=1, r_words=2, n'=0x75075075, ACTIVE
[MONTGOMERY_COMPLETE] Initializing context for 6-bit modulus
[MONTGOMERY_COMPLETE] ‚úì R > n verified
[MONTGOMERY_COMPLETE] ‚úì n' = 0x75075075 computed successfully
[MONTGOMERY_COMPLETE] Computing R^(-1) mod n...
[EXT_GCD_FULL] Computing 3-word^(-1) mod 1-word
[EXT_GCD_FULL] Small modulus optimization
[EXT_GCD_FULL] Computing 16^(-1) mod 35
[EXT_GCD_FULL] Found inverse by trial: 11
[MONTGOMERY_COMPLETE] Computing R^2 mod n...
[MONTGOMERY_COMPLETE] ‚úÖ Context initialization completed successfully
[MONTGOMERY_COMPLETE] Parameters: n_words=1, r_words=2, n'=0x75075075, ACTIVE
‚úÖ RSA keys loaded successfully

=== Test Vector 1: message = "2" ===
üîê Encrypting message "2"...
[MONT_EXP_COMPLETE] Complete Montgomery exponentiation
[MONT_TO_COMPLETE] Converting to Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000016, n' = 0x75075075, m = 0x0ea0ea0e
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x2
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_TO_COMPLETE] Converting to Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000000b, n' = 0x75075075, m = 0x07507507
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Starting square-and-multiply
[MONT_EXP_COMPLETE] Processing 3 exponent bits
[MONT_EXP_COMPLETE] Bit 0 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000002, n' = 0x75075075, m = 0xea0ea0ea
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x20
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 0)
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000004, n' = 0x75075075, m = 0xd41d41d4
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1d
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Progress: bit 0/3 (0.0%)
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 1)
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000349, n' = 0x75075075, m = 0x7507505d
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x10
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Bit 2 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000200, n' = 0x75075075, m = 0x0ea0ea00
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x2
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Converting result back from Montgomery form
[MONT_FROM_COMPLETE] Converting from Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000002, n' = 0x75075075, m = 0xea0ea0ea
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x20
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] ‚úÖ Complete Montgomery exponentiation finished
   Encrypted (hex): "20"
   Encrypted (decimal): 32
   Expected (decimal): 32
‚úÖ Encryption verification: PASS
üîì Decrypting "20"...
[MONT_EXP_COMPLETE] Complete Montgomery exponentiation
[MONT_TO_COMPLETE] Converting to Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000160, n' = 0x75075075, m = 0xea0ea0e0
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x20
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_TO_COMPLETE] Converting to Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000000b, n' = 0x75075075, m = 0x07507507
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Starting square-and-multiply
[MONT_EXP_COMPLETE] Processing 3 exponent bits
[MONT_EXP_COMPLETE] Bit 0 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000020, n' = 0x75075075, m = 0xa0ea0ea0
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x16
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 0)
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000400, n' = 0x75075075, m = 0x1d41d400
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x4
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Progress: bit 0/3 (0.0%)
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 1)
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000010, n' = 0x75075075, m = 0x50750750
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0xb
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Bit 2 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x000000f2, n' = 0x75075075, m = 0xa0ea0e9a
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x16
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Converting result back from Montgomery form
[MONT_FROM_COMPLETE] Converting from Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000016, n' = 0x75075075, m = 0x0ea0ea0e
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x2
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] ‚úÖ Complete Montgomery exponentiation finished
   Decrypted: "2"
   Expected: "2"
‚úÖ Round-trip Result: PASS

=== Test Vector 2: message = "3" ===
üîê Encrypting message "3"...
[MONT_EXP_COMPLETE] Complete Montgomery exponentiation
[MONT_TO_COMPLETE] Converting to Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000021, n' = 0x75075075, m = 0x15f15f15
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x3
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_TO_COMPLETE] Converting to Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000000b, n' = 0x75075075, m = 0x07507507
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Starting square-and-multiply
[MONT_EXP_COMPLETE] Processing 3 exponent bits
[MONT_EXP_COMPLETE] Bit 0 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000003, n' = 0x75075075, m = 0x5f15f15f
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0xd
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 0)
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000009, n' = 0x75075075, m = 0x1d41d41d
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x4
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Progress: bit 0/3 (0.0%)
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 1)
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000010, n' = 0x75075075, m = 0x50750750
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0xb
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Bit 2 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000008f, n' = 0x75075075, m = 0x5f15f15b
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0xd
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Converting result back from Montgomery form
[MONT_FROM_COMPLETE] Converting from Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000000d, n' = 0x75075075, m = 0xf15f15f1
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x21
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] ‚úÖ Complete Montgomery exponentiation finished
   Encrypted (hex): "21"
   Encrypted (decimal): 33
   Expected (decimal): 33
‚úÖ Encryption verification: PASS
üîì Decrypting "21"...
[MONT_EXP_COMPLETE] Complete Montgomery exponentiation
[MONT_TO_COMPLETE] Converting to Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000016b, n' = 0x75075075, m = 0xf15f15e7
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x21
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_TO_COMPLETE] Converting to Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000000b, n' = 0x75075075, m = 0x07507507
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Starting square-and-multiply
[MONT_EXP_COMPLETE] Processing 3 exponent bits
[MONT_EXP_COMPLETE] Bit 0 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000021, n' = 0x75075075, m = 0x15f15f15
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x3
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 0)
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000441, n' = 0x75075075, m = 0xd41d41b5
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1d
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Progress: bit 0/3 (0.0%)
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 1)
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000349, n' = 0x75075075, m = 0x7507505d
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x10
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Bit 2 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000030, n' = 0x75075075, m = 0xf15f15f0
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x21
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Converting result back from Montgomery form
[MONT_FROM_COMPLETE] Converting from Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000021, n' = 0x75075075, m = 0x15f15f15
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x3
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] ‚úÖ Complete Montgomery exponentiation finished
   Decrypted: "3"
   Expected: "3"
‚úÖ Round-trip Result: PASS

=== Test Vector 3: message = "4" ===
üîê Encrypting message "4"...
[MONT_EXP_COMPLETE] Complete Montgomery exponentiation
[MONT_TO_COMPLETE] Converting to Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000002c, n' = 0x75075075, m = 0x1d41d41c
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x4
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_TO_COMPLETE] Converting to Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000000b, n' = 0x75075075, m = 0x07507507
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Starting square-and-multiply
[MONT_EXP_COMPLETE] Processing 3 exponent bits
[MONT_EXP_COMPLETE] Bit 0 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000004, n' = 0x75075075, m = 0xd41d41d4
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1d
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 0)
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000010, n' = 0x75075075, m = 0x50750750
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0xb
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Progress: bit 0/3 (0.0%)
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 1)
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000079, n' = 0x75075075, m = 0x5075074d
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0xb
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Bit 2 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000013f, n' = 0x75075075, m = 0xd41d41cb
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1d
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Converting result back from Montgomery form
[MONT_FROM_COMPLETE] Converting from Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000001d, n' = 0x75075075, m = 0x41d41d41
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x9
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] ‚úÖ Complete Montgomery exponentiation finished
   Encrypted (hex): "9"
   Encrypted (decimal): 9
   Expected (decimal): 9
‚úÖ Encryption verification: PASS
üîì Decrypting "9"...
[MONT_EXP_COMPLETE] Complete Montgomery exponentiation
[MONT_TO_COMPLETE] Converting to Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000063, n' = 0x75075075, m = 0x41d41d3f
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x9
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_TO_COMPLETE] Converting to Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000000b, n' = 0x75075075, m = 0x07507507
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Starting square-and-multiply
[MONT_EXP_COMPLETE] Processing 3 exponent bits
[MONT_EXP_COMPLETE] Bit 0 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000009, n' = 0x75075075, m = 0x1d41d41d
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x4
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 0)
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000051, n' = 0x75075075, m = 0x07507505
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Progress: bit 0/3 (0.0%)
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 1)
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000001, n' = 0x75075075, m = 0x75075075
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x10
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Bit 2 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000040, n' = 0x75075075, m = 0x41d41d40
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x9
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Converting result back from Montgomery form
[MONT_FROM_COMPLETE] Converting from Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000009, n' = 0x75075075, m = 0x1d41d41d
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x4
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] ‚úÖ Complete Montgomery exponentiation finished
   Decrypted: "4"
   Expected: "4"
‚úÖ Round-trip Result: PASS

===============================================
Verification Summary:
  ‚úÖ Tests passed: 3/3
  üéâ Overall result: ALL TESTS PASSED!
===============================================
richi@Touan-Richi-Zbook-G11:~/4096C$ ./rsa_4096 test
[main:16] Starting RSA-4096 application
[main:26] Running large RSA key testing
===============================================
RSA Large Key Testing - ENHANCED
===============================================
Date: 2025-07-29 14:58:13 UTC
User: RSAhardcore

Testing with larger modulus (8-bit): n = 143 = 11 √ó 13
œÜ(n) = 120, using e = 7, d = 103

[MONTGOMERY_COMPLETE] Initializing context for 8-bit modulus
[MONTGOMERY_COMPLETE] ‚úì R > n verified
[MONTGOMERY_COMPLETE] ‚úì n' = 0x055ee191 computed successfully
[MONTGOMERY_COMPLETE] Computing R^(-1) mod n...
[EXT_GCD_FULL] Computing 3-word^(-1) mod 1-word
[EXT_GCD_FULL] Small modulus optimization
[EXT_GCD_FULL] Computing 16^(-1) mod 143
[EXT_GCD_FULL] Found inverse by trial: 9
[MONTGOMERY_COMPLETE] Computing R^2 mod n...
[MONTGOMERY_COMPLETE] ‚úÖ Context initialization completed successfully
[MONTGOMERY_COMPLETE] Parameters: n_words=1, r_words=2, n'=0x055ee191, ACTIVE
[MONTGOMERY_COMPLETE] Initializing context for 8-bit modulus
[MONTGOMERY_COMPLETE] ‚úì R > n verified
[MONTGOMERY_COMPLETE] ‚úì n' = 0x055ee191 computed successfully
[MONTGOMERY_COMPLETE] Computing R^(-1) mod n...
[EXT_GCD_FULL] Computing 3-word^(-1) mod 1-word
[EXT_GCD_FULL] Small modulus optimization
[EXT_GCD_FULL] Computing 16^(-1) mod 143
[EXT_GCD_FULL] Found inverse by trial: 9
[MONTGOMERY_COMPLETE] Computing R^2 mod n...
[MONTGOMERY_COMPLETE] ‚úÖ Context initialization completed successfully
[MONTGOMERY_COMPLETE] Parameters: n_words=1, r_words=2, n'=0x055ee191, ACTIVE
‚úÖ Large keys loaded successfully
‚ÑπÔ∏è  Montgomery REDC is disabled (fallback to standard arithmetic)

üîê Testing encryption/decryption with message: 42
[MONT_EXP_COMPLETE] Complete Montgomery exponentiation
[MONT_TO_COMPLETE] Converting to Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000128a, n' = 0x055ee191, m = 0x9101ca2a
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x51
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_TO_COMPLETE] Converting to Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000071, n' = 0x055ee191, m = 0x5ee19101
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x35
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Starting square-and-multiply
[MONT_EXP_COMPLETE] Processing 3 exponent bits
[MONT_EXP_COMPLETE] Bit 0 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x000010c5, n' = 0x055ee191, m = 0x101ca495
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x9
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 0)
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x000019a1, n' = 0x055ee191, m = 0xa4b30531
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x5c
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Progress: bit 0/3 (0.0%)
[MONT_EXP_COMPLETE] Bit 1 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000033c, n' = 0x055ee191, m = 0x5ee190fc
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x35
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 1)
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00002110, n' = 0x055ee191, m = 0x9101ca10
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x51
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Bit 2 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x000010c5, n' = 0x055ee191, m = 0x101ca495
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x9
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Converting result back from Montgomery form
[MONT_FROM_COMPLETE] Converting from Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000009, n' = 0x055ee191, m = 0x3055ee19
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1b
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] ‚úÖ Complete Montgomery exponentiation finished
   Encrypted: 27
[MONT_EXP_COMPLETE] Complete Montgomery exponentiation
[MONT_TO_COMPLETE] Converting to Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000beb, n' = 0x055ee191, m = 0x01ca4b1b
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_TO_COMPLETE] Converting to Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000071, n' = 0x055ee191, m = 0x5ee19101
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x35
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Starting square-and-multiply
[MONT_EXP_COMPLETE] Processing 7 exponent bits
[MONT_EXP_COMPLETE] Bit 0 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000035, n' = 0x055ee191, m = 0x1ca4b305
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x10
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 0)
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000001, n' = 0x055ee191, m = 0x055ee191
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x3
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Progress: bit 0/7 (0.0%)
[MONT_EXP_COMPLETE] Bit 1 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000030, n' = 0x055ee191, m = 0x01ca4b30
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 1)
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000009, n' = 0x055ee191, m = 0x3055ee19
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1b
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Bit 2 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000001b, n' = 0x055ee191, m = 0x9101ca4b
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x51
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 2)
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x000002d9, n' = 0x055ee191, m = 0x4b3055e9
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x2a
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 3)
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x000006e4, n' = 0x055ee191, m = 0x01ca4b24
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 4)
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000001, n' = 0x055ee191, m = 0x055ee191
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x3
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Bit 5 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x000000f3, n' = 0x055ee191, m = 0x19101ca3
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0xe
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000009, n' = 0x055ee191, m = 0x3055ee19
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1b
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Bit 6 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000017a, n' = 0x055ee191, m = 0xee19101a
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x85
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] Converting result back from Montgomery form
[MONT_FROM_COMPLETE] Converting from Montgomery form
[REDC_COMPLETE] Starting Complete Montgomery REDC
[REDC_COMPLETE] Working with A: 12 words
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000085, n' = 0x055ee191, m = 0xca4b3055
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x71
[REDC_COMPLETE] After iteration 1: A has 12 words
[REDC_COMPLETE] Main REDC loop completed
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[MONT_EXP_COMPLETE] ‚úÖ Complete Montgomery exponentiation finished
   Decrypted: 113
‚ùå Large key test FAILED
richi@Touan-Richi-Zbook-G11:~/4096C$ make help
RSA-4096 with Complete Montgomery REDC - Build System
=====================================================
Available targets:
  all                    - Build main executable (default)
  production            - Full production build with tests
  debug                 - Debug build with full logging
  test_rsa_4096_real    - Build test executable
  run_basic_tests       - Run basic verification tests
  run_performance_tests - Run performance benchmarks
  run_comprehensive_tests - Run all tests including real keys
  memcheck              - Run with memory leak detection
  static_analysis       - Run static code analysis
  install               - Install to system (/usr/local/bin)
  uninstall             - Remove from system
  clean                 - Clean build artifacts
  dist                  - Create distribution package
  help                  - Show this help message

System Status:
  ‚úÖ Complete Montgomery REDC: IMPLEMENTED
  ‚úÖ RSA-4096 capability: READY
  ‚úÖ Fallback arithmetic: STABLE
  ‚úÖ Production ready: YES
richi@Touan-Richi-Zbook-G11:~/4096C$ make debug
üßπ Cleaning build artifacts...
‚úÖ Clean completed!
üîß Compiling rsa_4096_bigint.c...
gcc -Wall -Wextra -O3 -DNDEBUG -DLOG_LEVEL=2 -std=c99 -fstack-protector-strong -D_FORTIFY_SOURCE=2 -g -O0 -DDEBUG -DLOG_LEVEL=0 -c rsa_4096_bigint.c -o rsa_4096_bigint.o
<command-line>: warning: "LOG_LEVEL" redefined
<command-line>: note: this is the location of the previous definition
üîß Compiling rsa_4096_arithmetic.c...
gcc -Wall -Wextra -O3 -DNDEBUG -DLOG_LEVEL=2 -std=c99 -fstack-protector-strong -D_FORTIFY_SOURCE=2 -g -O0 -DDEBUG -DLOG_LEVEL=0 -c rsa_4096_arithmetic.c -o rsa_4096_arithmetic.o
<command-line>: warning: "LOG_LEVEL" redefined
<command-line>: note: this is the location of the previous definition
üîß Compiling rsa_4096_montgomery.c (COMPLETE REDC)...
gcc -Wall -Wextra -O3 -DNDEBUG -DLOG_LEVEL=2 -std=c99 -fstack-protector-strong -D_FORTIFY_SOURCE=2 -g -O0 -DDEBUG -DLOG_LEVEL=0 -c rsa_4096_montgomery.c -o rsa_4096_montgomery.o
<command-line>: warning: "LOG_LEVEL" redefined
<command-line>: note: this is the location of the previous definition
üîß Compiling rsa_4096_core.c...
gcc -Wall -Wextra -O3 -DNDEBUG -DLOG_LEVEL=2 -std=c99 -fstack-protector-strong -D_FORTIFY_SOURCE=2 -g -O0 -DDEBUG -DLOG_LEVEL=0 -c rsa_4096_core.c -o rsa_4096_core.o
<command-line>: warning: "LOG_LEVEL" redefined
<command-line>: note: this is the location of the previous definition
üîß Compiling rsa_4096_tests.c...
gcc -Wall -Wextra -O3 -DNDEBUG -DLOG_LEVEL=2 -std=c99 -fstack-protector-strong -D_FORTIFY_SOURCE=2 -g -O0 -DDEBUG -DLOG_LEVEL=0 -c rsa_4096_tests.c -o rsa_4096_tests.o
<command-line>: warning: "LOG_LEVEL" redefined
<command-line>: note: this is the location of the previous definition
üîß Compiling main.c...
gcc -Wall -Wextra -O3 -DNDEBUG -DLOG_LEVEL=2 -std=c99 -fstack-protector-strong -D_FORTIFY_SOURCE=2 -g -O0 -DDEBUG -DLOG_LEVEL=0 -c main.c -o main.o
<command-line>: warning: "LOG_LEVEL" redefined
<command-line>: note: this is the location of the previous definition
üîó Linking RSA-4096 executable...
gcc -Wall -Wextra -O3 -DNDEBUG -DLOG_LEVEL=2 -std=c99 -fstack-protector-strong -D_FORTIFY_SOURCE=2 -g -O0 -DDEBUG -DLOG_LEVEL=0 -o rsa_4096 rsa_4096_bigint.o rsa_4096_arithmetic.o rsa_4096_montgomery.o rsa_4096_core.o rsa_4096_tests.o main.o -lm
‚úÖ RSA-4096 executable created successfully
üêõ Debug build completed with full logging enabled
richi@Touan-Richi-Zbook-G11:~/4096C$ make help
RSA-4096 with Complete Montgomery REDC - Build System
=====================================================
Available targets:
  all                    - Build main executable (default)
  production            - Full production build with tests
  debug                 - Debug build with full logging
  test_rsa_4096_real    - Build test executable
  run_basic_tests       - Run basic verification tests
  run_performance_tests - Run performance benchmarks
  run_comprehensive_tests - Run all tests including real keys
  memcheck              - Run with memory leak detection
  static_analysis       - Run static code analysis
  install               - Install to system (/usr/local/bin)
  uninstall             - Remove from system
  clean                 - Clean build artifacts
  dist                  - Create distribution package
  help                  - Show this help message

System Status:
  ‚úÖ Complete Montgomery REDC: IMPLEMENTED
  ‚úÖ RSA-4096 capability: READY
  ‚úÖ Fallback arithmetic: STABLE
  ‚úÖ Production ready: YES
richi@Touan-Richi-Zbook-G11:~/4096C$ make run_comprehensive_tests
üîß Building test_rsa_4096_real...
gcc -Wall -Wextra -O3 -DNDEBUG -DLOG_LEVEL=2 -std=c99 -fstack-protector-strong -D_FORTIFY_SOURCE=2 -o test_rsa_4096_real rsa_4096_bigint.o rsa_4096_arithmetic.o rsa_4096_montgomery.o rsa_4096_core.o rsa_4096_tests.o test_rsa_4096_real.c -lm
‚úÖ Test executable created successfully
üß™ Running basic verification tests...
./rsa_4096 verify
[main:16] Starting RSA-4096 application
[main:22] Running verification mode (hex)
===============================================
RSA-4096 Verification Tests (BUGS FIXED)
===============================================
Date: 2025-07-29 15:06:51 UTC
User: RSAhardcore

Test Parameters:
  Modulus (n): 35
  Public Exponent (e): 5
  Private Exponent (d): 5

RSA Parameter Verification:
  n = 35 = 5 √ó 7
  œÜ(n) = œÜ(35) = (5-1) √ó (7-1) = 4 √ó 6 = 24
  e = 5, gcd(5, 24) = 1 ‚úì
  d = 5, e √ó d = 5 √ó 5 = 25 ‚â° 1 (mod 24) ‚úì

Expected Results (Manual Calculation):
[MANUAL CALC] Computing 2^5 mod 35
[MANUAL CALC] Step 1: result = 2
[MANUAL CALC] Step 2: result = 4
[MANUAL CALC] Step 3: result = 8
[MANUAL CALC] Step 4: result = 16
[MANUAL CALC] Step 5: result = 32
[MANUAL CALC] Final result: 32
[MANUAL CALC] Computing 3^5 mod 35
[MANUAL CALC] Step 1: result = 3
[MANUAL CALC] Step 2: result = 9
[MANUAL CALC] Step 3: result = 27
[MANUAL CALC] Step 4: result = 11
[MANUAL CALC] Step 5: result = 33
[MANUAL CALC] Final result: 33
[MANUAL CALC] Computing 4^5 mod 35
[MANUAL CALC] Step 1: result = 4
[MANUAL CALC] Step 2: result = 16
[MANUAL CALC] Step 3: result = 29
[MANUAL CALC] Step 4: result = 11
[MANUAL CALC] Step 5: result = 9
[MANUAL CALC] Final result: 9
  Message 2: encrypt to 32
  Message 3: encrypt to 33
  Message 4: encrypt to 9

‚úÖ Key structures initialized properly
[rsa_4096_load_key:35] Loading RSA key (private=0)
[rsa_4096_load_key:75] Initializing Montgomery REDC context for 6-bit modulus
[MONTGOMERY_COMPLETE] Initializing context for 6-bit modulus
[DEBUG] Modulus (n): 0x00000023
[DEBUG] R: 0x000000010000000000000000
[MONTGOMERY_COMPLETE] ‚úì R > n verified
[DEBUG] Computing Montgomery n' for 0x00000023
[DEBUG] Computing word inverse of 0x00000023
[DEBUG] Iteration 1: x = 0xffff58cb
[DEBUG] Iteration 2: x = 0x1195ff8b
[DEBUG] Iteration 3: x = 0xbff8af8b
[DEBUG] Iteration 4: x = 0x8af8af8b
[DEBUG] Iteration 5: x = 0x8af8af8b
[DEBUG] ‚úì Word inverse: 0x00000023^(-1) = 0x8af8af8b (mod 2^32)
[DEBUG] n^(-1) = 0x8af8af8b
[DEBUG] n' = -n^(-1) = 0x75075075
[DEBUG] Verification: n * n' = 0x00000023 * 0x75075075 = 0xffffffff
[DEBUG] ‚úì Montgomery n' verification PASSED
[MONTGOMERY_COMPLETE] ‚úì n' = 0x75075075 computed successfully
[MONTGOMERY_COMPLETE] Computing R^(-1) mod n...
[EXT_GCD_FULL] Computing 3-word^(-1) mod 1-word
[EXT_GCD_FULL] Small modulus optimization
[EXT_GCD_FULL] Computing 16^(-1) mod 35
[EXT_GCD_FULL] Found inverse by trial: 11
[DEBUG] R^(-1) mod n: 0x0000000b
[MONTGOMERY_COMPLETE] Computing R^2 mod n...
[DEBUG] R^2 mod n: 0x0000000b
[MONTGOMERY_COMPLETE] ‚úÖ Context initialization completed successfully
[MONTGOMERY_COMPLETE] Parameters: n_words=1, r_words=2, n'=0x75075075, ACTIVE
[rsa_4096_load_key:84] RSA key loaded successfully: 6-bit modulus, public key
[rsa_4096_load_key:35] Loading RSA key (private=1)
[rsa_4096_load_key:75] Initializing Montgomery REDC context for 6-bit modulus
[MONTGOMERY_COMPLETE] Initializing context for 6-bit modulus
[DEBUG] Modulus (n): 0x00000023
[DEBUG] R: 0x000000010000000000000000
[MONTGOMERY_COMPLETE] ‚úì R > n verified
[DEBUG] Computing Montgomery n' for 0x00000023
[DEBUG] Computing word inverse of 0x00000023
[DEBUG] Iteration 1: x = 0xffff58cb
[DEBUG] Iteration 2: x = 0x1195ff8b
[DEBUG] Iteration 3: x = 0xbff8af8b
[DEBUG] Iteration 4: x = 0x8af8af8b
[DEBUG] Iteration 5: x = 0x8af8af8b
[DEBUG] ‚úì Word inverse: 0x00000023^(-1) = 0x8af8af8b (mod 2^32)
[DEBUG] n^(-1) = 0x8af8af8b
[DEBUG] n' = -n^(-1) = 0x75075075
[DEBUG] Verification: n * n' = 0x00000023 * 0x75075075 = 0xffffffff
[DEBUG] ‚úì Montgomery n' verification PASSED
[MONTGOMERY_COMPLETE] ‚úì n' = 0x75075075 computed successfully
[MONTGOMERY_COMPLETE] Computing R^(-1) mod n...
[EXT_GCD_FULL] Computing 3-word^(-1) mod 1-word
[EXT_GCD_FULL] Small modulus optimization
[EXT_GCD_FULL] Computing 16^(-1) mod 35
[EXT_GCD_FULL] Found inverse by trial: 11
[DEBUG] R^(-1) mod n: 0x0000000b
[MONTGOMERY_COMPLETE] Computing R^2 mod n...
[DEBUG] R^2 mod n: 0x0000000b
[MONTGOMERY_COMPLETE] ‚úÖ Context initialization completed successfully
[MONTGOMERY_COMPLETE] Parameters: n_words=1, r_words=2, n'=0x75075075, ACTIVE
[rsa_4096_load_key:84] RSA key loaded successfully: 6-bit modulus, private key
‚úÖ RSA keys loaded successfully

=== Test Vector 1: message = "2" ===
üîê Encrypting message "2"...
[rsa_4096_encrypt:140] Encrypting message using RSA-4096
[rsa_4096_encrypt:180] Using Montgomery exponentiation
[MONT_EXP_COMPLETE] Complete Montgomery exponentiation
[DEBUG] Base: 0x00000002
[DEBUG] Exponent: 0x00000005
[DEBUG] Modulus: 0x00000023
[MONT_TO_COMPLETE] Converting to Montgomery form
[DEBUG] Input a: 0x00000002
[DEBUG] R^2 mod n: 0x0000000b
[DEBUG] a * R^2: 0x00000016
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x00000016
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...00000016 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000016, n' = 0x75075075, m = 0x0ea0ea0e
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x2
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000002
[DEBUG] Final REDC result: 0x00000002
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery form result: 0x00000002
[MONT_TO_COMPLETE] Converting to Montgomery form
[DEBUG] Input a: 0x00000001
[DEBUG] R^2 mod n: 0x0000000b
[DEBUG] a * R^2: 0x0000000b
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x0000000b
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...0000000b (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000000b, n' = 0x75075075, m = 0x07507507
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000001
[DEBUG] Final REDC result: 0x00000001
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery form result: 0x00000001
[MONT_EXP_COMPLETE] Starting square-and-multiply
[DEBUG] Initial mont_base: 0x00000002
[DEBUG] Initial mont_result (1): 0x00000001
[MONT_EXP_COMPLETE] Processing 3 exponent bits
[MONT_EXP_COMPLETE] Bit 0 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[DEBUG] a: 0x00000001
[DEBUG] b: 0x00000002
[DEBUG] a * b: 0x00000002
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x00000002
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...00000002 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000002, n' = 0x75075075, m = 0xea0ea0ea
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x20
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000020
[DEBUG] Final REDC result: 0x00000020
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery mul result: 0x00000020
[DEBUG] mont_result after multiply: 0x00000020
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 0)
[MONT_MUL_COMPLETE] Montgomery multiplication
[DEBUG] a: 0x00000002
[DEBUG] b: 0x00000002
[DEBUG] a * b: 0x00000004
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x00000004
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...00000004 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000004, n' = 0x75075075, m = 0xd41d41d4
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1d
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x0000001d
[DEBUG] Final REDC result: 0x0000001d
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery mul result: 0x0000001d
[DEBUG] mont_base after square: 0x0000001d
[MONT_EXP_COMPLETE] Progress: bit 0/3 (0.0%)
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 1)
[MONT_MUL_COMPLETE] Montgomery multiplication
[DEBUG] a: 0x0000001d
[DEBUG] b: 0x0000001d
[DEBUG] a * b: 0x00000349
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x00000349
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...00000349 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000349, n' = 0x75075075, m = 0x7507505d
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x10
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000010
[DEBUG] Final REDC result: 0x00000010
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery mul result: 0x00000010
[DEBUG] mont_base after square: 0x00000010
[MONT_EXP_COMPLETE] Bit 2 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[DEBUG] a: 0x00000020
[DEBUG] b: 0x00000010
[DEBUG] a * b: 0x00000200
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x00000200
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...00000200 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000200, n' = 0x75075075, m = 0x0ea0ea00
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x2
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000002
[DEBUG] Final REDC result: 0x00000002
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery mul result: 0x00000002
[DEBUG] mont_result after multiply: 0x00000002
[MONT_EXP_COMPLETE] Converting result back from Montgomery form
[MONT_FROM_COMPLETE] Converting from Montgomery form
[DEBUG] Montgomery input: 0x00000002
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x00000002
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...00000002 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000002, n' = 0x75075075, m = 0xea0ea0ea
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x20
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000020
[DEBUG] Final REDC result: 0x00000020
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Normal form result: 0x00000020
[DEBUG] Final exponentiation result: 0x00000020
[MONT_EXP_COMPLETE] ‚úÖ Complete Montgomery exponentiation finished
[rsa_4096_encrypt:197] Encryption completed successfully
   Encrypted (hex): "20"
   Encrypted (decimal): 32
   Expected (decimal): 32
‚úÖ Encryption verification: PASS
üîì Decrypting "20"...
[rsa_4096_decrypt:203] Decrypting message using RSA-4096
[rsa_4096_decrypt:247] Using Montgomery exponentiation for decryption
[MONT_EXP_COMPLETE] Complete Montgomery exponentiation
[DEBUG] Base: 0x00000020
[DEBUG] Exponent: 0x00000005
[DEBUG] Modulus: 0x00000023
[MONT_TO_COMPLETE] Converting to Montgomery form
[DEBUG] Input a: 0x00000020
[DEBUG] R^2 mod n: 0x0000000b
[DEBUG] a * R^2: 0x00000160
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x00000160
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...00000160 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000160, n' = 0x75075075, m = 0xea0ea0e0
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x20
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000020
[DEBUG] Final REDC result: 0x00000020
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery form result: 0x00000020
[MONT_TO_COMPLETE] Converting to Montgomery form
[DEBUG] Input a: 0x00000001
[DEBUG] R^2 mod n: 0x0000000b
[DEBUG] a * R^2: 0x0000000b
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x0000000b
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...0000000b (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000000b, n' = 0x75075075, m = 0x07507507
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000001
[DEBUG] Final REDC result: 0x00000001
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery form result: 0x00000001
[MONT_EXP_COMPLETE] Starting square-and-multiply
[DEBUG] Initial mont_base: 0x00000020
[DEBUG] Initial mont_result (1): 0x00000001
[MONT_EXP_COMPLETE] Processing 3 exponent bits
[MONT_EXP_COMPLETE] Bit 0 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[DEBUG] a: 0x00000001
[DEBUG] b: 0x00000020
[DEBUG] a * b: 0x00000020
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x00000020
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...00000020 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000020, n' = 0x75075075, m = 0xa0ea0ea0
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x16
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000016
[DEBUG] Final REDC result: 0x00000016
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery mul result: 0x00000016
[DEBUG] mont_result after multiply: 0x00000016
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 0)
[MONT_MUL_COMPLETE] Montgomery multiplication
[DEBUG] a: 0x00000020
[DEBUG] b: 0x00000020
[DEBUG] a * b: 0x00000400
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x00000400
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...00000400 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000400, n' = 0x75075075, m = 0x1d41d400
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x4
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000004
[DEBUG] Final REDC result: 0x00000004
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery mul result: 0x00000004
[DEBUG] mont_base after square: 0x00000004
[MONT_EXP_COMPLETE] Progress: bit 0/3 (0.0%)
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 1)
[MONT_MUL_COMPLETE] Montgomery multiplication
[DEBUG] a: 0x00000004
[DEBUG] b: 0x00000004
[DEBUG] a * b: 0x00000010
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x00000010
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...00000010 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000010, n' = 0x75075075, m = 0x50750750
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0xb
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x0000000b
[DEBUG] Final REDC result: 0x0000000b
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery mul result: 0x0000000b
[DEBUG] mont_base after square: 0x0000000b
[MONT_EXP_COMPLETE] Bit 2 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[DEBUG] a: 0x00000016
[DEBUG] b: 0x0000000b
[DEBUG] a * b: 0x000000f2
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x000000f2
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...000000f2 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x000000f2, n' = 0x75075075, m = 0xa0ea0e9a
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x16
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000016
[DEBUG] Final REDC result: 0x00000016
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery mul result: 0x00000016
[DEBUG] mont_result after multiply: 0x00000016
[MONT_EXP_COMPLETE] Converting result back from Montgomery form
[MONT_FROM_COMPLETE] Converting from Montgomery form
[DEBUG] Montgomery input: 0x00000016
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x00000016
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...00000016 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000016, n' = 0x75075075, m = 0x0ea0ea0e
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x2
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000002
[DEBUG] Final REDC result: 0x00000002
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Normal form result: 0x00000002
[DEBUG] Final exponentiation result: 0x00000002
[MONT_EXP_COMPLETE] ‚úÖ Complete Montgomery exponentiation finished
[rsa_4096_decrypt:264] Decryption completed successfully
   Decrypted: "2"
   Expected: "2"
‚úÖ Round-trip Result: PASS

=== Test Vector 2: message = "3" ===
üîê Encrypting message "3"...
[rsa_4096_encrypt:140] Encrypting message using RSA-4096
[rsa_4096_encrypt:180] Using Montgomery exponentiation
[MONT_EXP_COMPLETE] Complete Montgomery exponentiation
[DEBUG] Base: 0x00000003
[DEBUG] Exponent: 0x00000005
[DEBUG] Modulus: 0x00000023
[MONT_TO_COMPLETE] Converting to Montgomery form
[DEBUG] Input a: 0x00000003
[DEBUG] R^2 mod n: 0x0000000b
[DEBUG] a * R^2: 0x00000021
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x00000021
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...00000021 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000021, n' = 0x75075075, m = 0x15f15f15
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x3
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000003
[DEBUG] Final REDC result: 0x00000003
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery form result: 0x00000003
[MONT_TO_COMPLETE] Converting to Montgomery form
[DEBUG] Input a: 0x00000001
[DEBUG] R^2 mod n: 0x0000000b
[DEBUG] a * R^2: 0x0000000b
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x0000000b
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...0000000b (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000000b, n' = 0x75075075, m = 0x07507507
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000001
[DEBUG] Final REDC result: 0x00000001
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery form result: 0x00000001
[MONT_EXP_COMPLETE] Starting square-and-multiply
[DEBUG] Initial mont_base: 0x00000003
[DEBUG] Initial mont_result (1): 0x00000001
[MONT_EXP_COMPLETE] Processing 3 exponent bits
[MONT_EXP_COMPLETE] Bit 0 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[DEBUG] a: 0x00000001
[DEBUG] b: 0x00000003
[DEBUG] a * b: 0x00000003
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x00000003
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...00000003 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000003, n' = 0x75075075, m = 0x5f15f15f
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0xd
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x0000000d
[DEBUG] Final REDC result: 0x0000000d
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery mul result: 0x0000000d
[DEBUG] mont_result after multiply: 0x0000000d
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 0)
[MONT_MUL_COMPLETE] Montgomery multiplication
[DEBUG] a: 0x00000003
[DEBUG] b: 0x00000003
[DEBUG] a * b: 0x00000009
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x00000009
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...00000009 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000009, n' = 0x75075075, m = 0x1d41d41d
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x4
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000004
[DEBUG] Final REDC result: 0x00000004
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery mul result: 0x00000004
[DEBUG] mont_base after square: 0x00000004
[MONT_EXP_COMPLETE] Progress: bit 0/3 (0.0%)
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 1)
[MONT_MUL_COMPLETE] Montgomery multiplication
[DEBUG] a: 0x00000004
[DEBUG] b: 0x00000004
[DEBUG] a * b: 0x00000010
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x00000010
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...00000010 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000010, n' = 0x75075075, m = 0x50750750
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0xb
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x0000000b
[DEBUG] Final REDC result: 0x0000000b
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery mul result: 0x0000000b
[DEBUG] mont_base after square: 0x0000000b
[MONT_EXP_COMPLETE] Bit 2 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[DEBUG] a: 0x0000000d
[DEBUG] b: 0x0000000b
[DEBUG] a * b: 0x0000008f
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x0000008f
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...0000008f (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000008f, n' = 0x75075075, m = 0x5f15f15b
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0xd
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x0000000d
[DEBUG] Final REDC result: 0x0000000d
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery mul result: 0x0000000d
[DEBUG] mont_result after multiply: 0x0000000d
[MONT_EXP_COMPLETE] Converting result back from Montgomery form
[MONT_FROM_COMPLETE] Converting from Montgomery form
[DEBUG] Montgomery input: 0x0000000d
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x0000000d
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...0000000d (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000000d, n' = 0x75075075, m = 0xf15f15f1
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x21
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000021
[DEBUG] Final REDC result: 0x00000021
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Normal form result: 0x00000021
[DEBUG] Final exponentiation result: 0x00000021
[MONT_EXP_COMPLETE] ‚úÖ Complete Montgomery exponentiation finished
[rsa_4096_encrypt:197] Encryption completed successfully
   Encrypted (hex): "21"
   Encrypted (decimal): 33
   Expected (decimal): 33
‚úÖ Encryption verification: PASS
üîì Decrypting "21"...
[rsa_4096_decrypt:203] Decrypting message using RSA-4096
[rsa_4096_decrypt:247] Using Montgomery exponentiation for decryption
[MONT_EXP_COMPLETE] Complete Montgomery exponentiation
[DEBUG] Base: 0x00000021
[DEBUG] Exponent: 0x00000005
[DEBUG] Modulus: 0x00000023
[MONT_TO_COMPLETE] Converting to Montgomery form
[DEBUG] Input a: 0x00000021
[DEBUG] R^2 mod n: 0x0000000b
[DEBUG] a * R^2: 0x0000016b
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x0000016b
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...0000016b (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000016b, n' = 0x75075075, m = 0xf15f15e7
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x21
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000021
[DEBUG] Final REDC result: 0x00000021
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery form result: 0x00000021
[MONT_TO_COMPLETE] Converting to Montgomery form
[DEBUG] Input a: 0x00000001
[DEBUG] R^2 mod n: 0x0000000b
[DEBUG] a * R^2: 0x0000000b
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x0000000b
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...0000000b (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000000b, n' = 0x75075075, m = 0x07507507
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000001
[DEBUG] Final REDC result: 0x00000001
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery form result: 0x00000001
[MONT_EXP_COMPLETE] Starting square-and-multiply
[DEBUG] Initial mont_base: 0x00000021
[DEBUG] Initial mont_result (1): 0x00000001
[MONT_EXP_COMPLETE] Processing 3 exponent bits
[MONT_EXP_COMPLETE] Bit 0 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[DEBUG] a: 0x00000001
[DEBUG] b: 0x00000021
[DEBUG] a * b: 0x00000021
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x00000021
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...00000021 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000021, n' = 0x75075075, m = 0x15f15f15
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x3
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000003
[DEBUG] Final REDC result: 0x00000003
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery mul result: 0x00000003
[DEBUG] mont_result after multiply: 0x00000003
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 0)
[MONT_MUL_COMPLETE] Montgomery multiplication
[DEBUG] a: 0x00000021
[DEBUG] b: 0x00000021
[DEBUG] a * b: 0x00000441
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x00000441
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...00000441 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000441, n' = 0x75075075, m = 0xd41d41b5
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1d
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x0000001d
[DEBUG] Final REDC result: 0x0000001d
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery mul result: 0x0000001d
[DEBUG] mont_base after square: 0x0000001d
[MONT_EXP_COMPLETE] Progress: bit 0/3 (0.0%)
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 1)
[MONT_MUL_COMPLETE] Montgomery multiplication
[DEBUG] a: 0x0000001d
[DEBUG] b: 0x0000001d
[DEBUG] a * b: 0x00000349
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x00000349
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...00000349 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000349, n' = 0x75075075, m = 0x7507505d
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x10
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000010
[DEBUG] Final REDC result: 0x00000010
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery mul result: 0x00000010
[DEBUG] mont_base after square: 0x00000010
[MONT_EXP_COMPLETE] Bit 2 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[DEBUG] a: 0x00000003
[DEBUG] b: 0x00000010
[DEBUG] a * b: 0x00000030
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x00000030
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...00000030 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000030, n' = 0x75075075, m = 0xf15f15f0
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x21
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000021
[DEBUG] Final REDC result: 0x00000021
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery mul result: 0x00000021
[DEBUG] mont_result after multiply: 0x00000021
[MONT_EXP_COMPLETE] Converting result back from Montgomery form
[MONT_FROM_COMPLETE] Converting from Montgomery form
[DEBUG] Montgomery input: 0x00000021
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x00000021
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...00000021 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000021, n' = 0x75075075, m = 0x15f15f15
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x3
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000003
[DEBUG] Final REDC result: 0x00000003
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Normal form result: 0x00000003
[DEBUG] Final exponentiation result: 0x00000003
[MONT_EXP_COMPLETE] ‚úÖ Complete Montgomery exponentiation finished
[rsa_4096_decrypt:264] Decryption completed successfully
   Decrypted: "3"
   Expected: "3"
‚úÖ Round-trip Result: PASS

=== Test Vector 3: message = "4" ===
üîê Encrypting message "4"...
[rsa_4096_encrypt:140] Encrypting message using RSA-4096
[rsa_4096_encrypt:180] Using Montgomery exponentiation
[MONT_EXP_COMPLETE] Complete Montgomery exponentiation
[DEBUG] Base: 0x00000004
[DEBUG] Exponent: 0x00000005
[DEBUG] Modulus: 0x00000023
[MONT_TO_COMPLETE] Converting to Montgomery form
[DEBUG] Input a: 0x00000004
[DEBUG] R^2 mod n: 0x0000000b
[DEBUG] a * R^2: 0x0000002c
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x0000002c
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...0000002c (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000002c, n' = 0x75075075, m = 0x1d41d41c
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x4
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000004
[DEBUG] Final REDC result: 0x00000004
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery form result: 0x00000004
[MONT_TO_COMPLETE] Converting to Montgomery form
[DEBUG] Input a: 0x00000001
[DEBUG] R^2 mod n: 0x0000000b
[DEBUG] a * R^2: 0x0000000b
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x0000000b
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...0000000b (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000000b, n' = 0x75075075, m = 0x07507507
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000001
[DEBUG] Final REDC result: 0x00000001
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery form result: 0x00000001
[MONT_EXP_COMPLETE] Starting square-and-multiply
[DEBUG] Initial mont_base: 0x00000004
[DEBUG] Initial mont_result (1): 0x00000001
[MONT_EXP_COMPLETE] Processing 3 exponent bits
[MONT_EXP_COMPLETE] Bit 0 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[DEBUG] a: 0x00000001
[DEBUG] b: 0x00000004
[DEBUG] a * b: 0x00000004
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x00000004
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...00000004 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000004, n' = 0x75075075, m = 0xd41d41d4
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1d
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x0000001d
[DEBUG] Final REDC result: 0x0000001d
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery mul result: 0x0000001d
[DEBUG] mont_result after multiply: 0x0000001d
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 0)
[MONT_MUL_COMPLETE] Montgomery multiplication
[DEBUG] a: 0x00000004
[DEBUG] b: 0x00000004
[DEBUG] a * b: 0x00000010
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x00000010
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...00000010 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000010, n' = 0x75075075, m = 0x50750750
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0xb
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x0000000b
[DEBUG] Final REDC result: 0x0000000b
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery mul result: 0x0000000b
[DEBUG] mont_base after square: 0x0000000b
[MONT_EXP_COMPLETE] Progress: bit 0/3 (0.0%)
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 1)
[MONT_MUL_COMPLETE] Montgomery multiplication
[DEBUG] a: 0x0000000b
[DEBUG] b: 0x0000000b
[DEBUG] a * b: 0x00000079
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x00000079
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...00000079 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000079, n' = 0x75075075, m = 0x5075074d
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0xb
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x0000000b
[DEBUG] Final REDC result: 0x0000000b
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery mul result: 0x0000000b
[DEBUG] mont_base after square: 0x0000000b
[MONT_EXP_COMPLETE] Bit 2 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[DEBUG] a: 0x0000001d
[DEBUG] b: 0x0000000b
[DEBUG] a * b: 0x0000013f
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x0000013f
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...0000013f (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000013f, n' = 0x75075075, m = 0xd41d41cb
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1d
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x0000001d
[DEBUG] Final REDC result: 0x0000001d
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery mul result: 0x0000001d
[DEBUG] mont_result after multiply: 0x0000001d
[MONT_EXP_COMPLETE] Converting result back from Montgomery form
[MONT_FROM_COMPLETE] Converting from Montgomery form
[DEBUG] Montgomery input: 0x0000001d
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x0000001d
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...0000001d (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000001d, n' = 0x75075075, m = 0x41d41d41
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x9
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000009
[DEBUG] Final REDC result: 0x00000009
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Normal form result: 0x00000009
[DEBUG] Final exponentiation result: 0x00000009
[MONT_EXP_COMPLETE] ‚úÖ Complete Montgomery exponentiation finished
[rsa_4096_encrypt:197] Encryption completed successfully
   Encrypted (hex): "9"
   Encrypted (decimal): 9
   Expected (decimal): 9
‚úÖ Encryption verification: PASS
üîì Decrypting "9"...
[rsa_4096_decrypt:203] Decrypting message using RSA-4096
[rsa_4096_decrypt:247] Using Montgomery exponentiation for decryption
[MONT_EXP_COMPLETE] Complete Montgomery exponentiation
[DEBUG] Base: 0x00000009
[DEBUG] Exponent: 0x00000005
[DEBUG] Modulus: 0x00000023
[MONT_TO_COMPLETE] Converting to Montgomery form
[DEBUG] Input a: 0x00000009
[DEBUG] R^2 mod n: 0x0000000b
[DEBUG] a * R^2: 0x00000063
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x00000063
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...00000063 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000063, n' = 0x75075075, m = 0x41d41d3f
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x9
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000009
[DEBUG] Final REDC result: 0x00000009
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery form result: 0x00000009
[MONT_TO_COMPLETE] Converting to Montgomery form
[DEBUG] Input a: 0x00000001
[DEBUG] R^2 mod n: 0x0000000b
[DEBUG] a * R^2: 0x0000000b
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x0000000b
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...0000000b (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000000b, n' = 0x75075075, m = 0x07507507
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000001
[DEBUG] Final REDC result: 0x00000001
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery form result: 0x00000001
[MONT_EXP_COMPLETE] Starting square-and-multiply
[DEBUG] Initial mont_base: 0x00000009
[DEBUG] Initial mont_result (1): 0x00000001
[MONT_EXP_COMPLETE] Processing 3 exponent bits
[MONT_EXP_COMPLETE] Bit 0 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[DEBUG] a: 0x00000001
[DEBUG] b: 0x00000009
[DEBUG] a * b: 0x00000009
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x00000009
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...00000009 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000009, n' = 0x75075075, m = 0x1d41d41d
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x4
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000004
[DEBUG] Final REDC result: 0x00000004
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery mul result: 0x00000004
[DEBUG] mont_result after multiply: 0x00000004
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 0)
[MONT_MUL_COMPLETE] Montgomery multiplication
[DEBUG] a: 0x00000009
[DEBUG] b: 0x00000009
[DEBUG] a * b: 0x00000051
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x00000051
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...00000051 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000051, n' = 0x75075075, m = 0x07507505
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000001
[DEBUG] Final REDC result: 0x00000001
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery mul result: 0x00000001
[DEBUG] mont_base after square: 0x00000001
[MONT_EXP_COMPLETE] Progress: bit 0/3 (0.0%)
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 1)
[MONT_MUL_COMPLETE] Montgomery multiplication
[DEBUG] a: 0x00000001
[DEBUG] b: 0x00000001
[DEBUG] a * b: 0x00000001
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x00000001
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...00000001 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000001, n' = 0x75075075, m = 0x75075075
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x10
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000010
[DEBUG] Final REDC result: 0x00000010
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery mul result: 0x00000010
[DEBUG] mont_base after square: 0x00000010
[MONT_EXP_COMPLETE] Bit 2 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[DEBUG] a: 0x00000004
[DEBUG] b: 0x00000010
[DEBUG] a * b: 0x00000040
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x00000040
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...00000040 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000040, n' = 0x75075075, m = 0x41d41d40
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x9
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000009
[DEBUG] Final REDC result: 0x00000009
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery mul result: 0x00000009
[DEBUG] mont_result after multiply: 0x00000009
[MONT_EXP_COMPLETE] Converting result back from Montgomery form
[MONT_FROM_COMPLETE] Converting from Montgomery form
[DEBUG] Montgomery input: 0x00000009
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x00000009
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...00000009 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000009, n' = 0x75075075, m = 0x1d41d41d
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x4
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000004
[DEBUG] Final REDC result: 0x00000004
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Normal form result: 0x00000004
[DEBUG] Final exponentiation result: 0x00000004
[MONT_EXP_COMPLETE] ‚úÖ Complete Montgomery exponentiation finished
[rsa_4096_decrypt:264] Decryption completed successfully
   Decrypted: "4"
   Expected: "4"
‚úÖ Round-trip Result: PASS

===============================================
Verification Summary:
  ‚úÖ Tests passed: 3/3
  üéâ Overall result: ALL TESTS PASSED!
===============================================
üß™ Running large key tests...
./rsa_4096 test
[main:16] Starting RSA-4096 application
[main:26] Running large RSA key testing
===============================================
RSA Large Key Testing - ENHANCED
===============================================
Date: 2025-07-29 15:06:51 UTC
User: RSAhardcore

Testing with larger modulus (8-bit): n = 143 = 11 √ó 13
œÜ(n) = 120, using e = 7, d = 103

[rsa_4096_load_key:35] Loading RSA key (private=0)
[rsa_4096_load_key:75] Initializing Montgomery REDC context for 8-bit modulus
[MONTGOMERY_COMPLETE] Initializing context for 8-bit modulus
[DEBUG] Modulus (n): 0x0000008f
[DEBUG] R: 0x000000010000000000000000
[MONTGOMERY_COMPLETE] ‚úì R > n verified
[DEBUG] Computing Montgomery n' for 0x0000008f
[DEBUG] Computing word inverse of 0x0000008f
[DEBUG] Iteration 1: x = 0xffd3626f
[DEBUG] Iteration 2: x = 0x73b11e6f
[DEBUG] Iteration 3: x = 0xfaa11e6f
[DEBUG] Iteration 4: x = 0xfaa11e6f
[DEBUG] Iteration 5: x = 0xfaa11e6f
[DEBUG] ‚úì Word inverse: 0x0000008f^(-1) = 0xfaa11e6f (mod 2^32)
[DEBUG] n^(-1) = 0xfaa11e6f
[DEBUG] n' = -n^(-1) = 0x055ee191
[DEBUG] Verification: n * n' = 0x0000008f * 0x055ee191 = 0xffffffff
[DEBUG] ‚úì Montgomery n' verification PASSED
[MONTGOMERY_COMPLETE] ‚úì n' = 0x055ee191 computed successfully
[MONTGOMERY_COMPLETE] Computing R^(-1) mod n...
[EXT_GCD_FULL] Computing 3-word^(-1) mod 1-word
[EXT_GCD_FULL] Small modulus optimization
[EXT_GCD_FULL] Computing 16^(-1) mod 143
[EXT_GCD_FULL] Found inverse by trial: 9
[DEBUG] R^(-1) mod n: 0x00000009
[MONTGOMERY_COMPLETE] Computing R^2 mod n...
[DEBUG] R^2 mod n: 0x00000071
[MONTGOMERY_COMPLETE] ‚úÖ Context initialization completed successfully
[MONTGOMERY_COMPLETE] Parameters: n_words=1, r_words=2, n'=0x055ee191, ACTIVE
[rsa_4096_load_key:84] RSA key loaded successfully: 8-bit modulus, public key
[rsa_4096_load_key:35] Loading RSA key (private=1)
[rsa_4096_load_key:75] Initializing Montgomery REDC context for 8-bit modulus
[MONTGOMERY_COMPLETE] Initializing context for 8-bit modulus
[DEBUG] Modulus (n): 0x0000008f
[DEBUG] R: 0x000000010000000000000000
[MONTGOMERY_COMPLETE] ‚úì R > n verified
[DEBUG] Computing Montgomery n' for 0x0000008f
[DEBUG] Computing word inverse of 0x0000008f
[DEBUG] Iteration 1: x = 0xffd3626f
[DEBUG] Iteration 2: x = 0x73b11e6f
[DEBUG] Iteration 3: x = 0xfaa11e6f
[DEBUG] Iteration 4: x = 0xfaa11e6f
[DEBUG] Iteration 5: x = 0xfaa11e6f
[DEBUG] ‚úì Word inverse: 0x0000008f^(-1) = 0xfaa11e6f (mod 2^32)
[DEBUG] n^(-1) = 0xfaa11e6f
[DEBUG] n' = -n^(-1) = 0x055ee191
[DEBUG] Verification: n * n' = 0x0000008f * 0x055ee191 = 0xffffffff
[DEBUG] ‚úì Montgomery n' verification PASSED
[MONTGOMERY_COMPLETE] ‚úì n' = 0x055ee191 computed successfully
[MONTGOMERY_COMPLETE] Computing R^(-1) mod n...
[EXT_GCD_FULL] Computing 3-word^(-1) mod 1-word
[EXT_GCD_FULL] Small modulus optimization
[EXT_GCD_FULL] Computing 16^(-1) mod 143
[EXT_GCD_FULL] Found inverse by trial: 9
[DEBUG] R^(-1) mod n: 0x00000009
[MONTGOMERY_COMPLETE] Computing R^2 mod n...
[DEBUG] R^2 mod n: 0x00000071
[MONTGOMERY_COMPLETE] ‚úÖ Context initialization completed successfully
[MONTGOMERY_COMPLETE] Parameters: n_words=1, r_words=2, n'=0x055ee191, ACTIVE
[rsa_4096_load_key:84] RSA key loaded successfully: 8-bit modulus, private key
‚úÖ Large keys loaded successfully
‚ÑπÔ∏è  Montgomery REDC is disabled (fallback to standard arithmetic)

üîê Testing encryption/decryption with message: 42
[rsa_4096_encrypt:140] Encrypting message using RSA-4096
[rsa_4096_encrypt:180] Using Montgomery exponentiation
[MONT_EXP_COMPLETE] Complete Montgomery exponentiation
[DEBUG] Base: 0x0000002a
[DEBUG] Exponent: 0x00000007
[DEBUG] Modulus: 0x0000008f
[MONT_TO_COMPLETE] Converting to Montgomery form
[DEBUG] Input a: 0x0000002a
[DEBUG] R^2 mod n: 0x00000071
[DEBUG] a * R^2: 0x0000128a
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x0000128a
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...0000128a (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000128a, n' = 0x055ee191, m = 0x9101ca2a
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x51
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000051
[DEBUG] Final REDC result: 0x00000051
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery form result: 0x00000051
[MONT_TO_COMPLETE] Converting to Montgomery form
[DEBUG] Input a: 0x00000001
[DEBUG] R^2 mod n: 0x00000071
[DEBUG] a * R^2: 0x00000071
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x00000071
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...00000071 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000071, n' = 0x055ee191, m = 0x5ee19101
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x35
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000035
[DEBUG] Final REDC result: 0x00000035
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery form result: 0x00000035
[MONT_EXP_COMPLETE] Starting square-and-multiply
[DEBUG] Initial mont_base: 0x00000051
[DEBUG] Initial mont_result (1): 0x00000035
[MONT_EXP_COMPLETE] Processing 3 exponent bits
[MONT_EXP_COMPLETE] Bit 0 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[DEBUG] a: 0x00000035
[DEBUG] b: 0x00000051
[DEBUG] a * b: 0x000010c5
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x000010c5
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...000010c5 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x000010c5, n' = 0x055ee191, m = 0x101ca495
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x9
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000009
[DEBUG] Final REDC result: 0x00000009
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery mul result: 0x00000009
[DEBUG] mont_result after multiply: 0x00000009
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 0)
[MONT_MUL_COMPLETE] Montgomery multiplication
[DEBUG] a: 0x00000051
[DEBUG] b: 0x00000051
[DEBUG] a * b: 0x000019a1
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x000019a1
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...000019a1 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x000019a1, n' = 0x055ee191, m = 0xa4b30531
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x5c
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x0000005c
[DEBUG] Final REDC result: 0x0000005c
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery mul result: 0x0000005c
[DEBUG] mont_base after square: 0x0000005c
[MONT_EXP_COMPLETE] Progress: bit 0/3 (0.0%)
[MONT_EXP_COMPLETE] Bit 1 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[DEBUG] a: 0x00000009
[DEBUG] b: 0x0000005c
[DEBUG] a * b: 0x0000033c
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x0000033c
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...0000033c (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000033c, n' = 0x055ee191, m = 0x5ee190fc
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x35
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000035
[DEBUG] Final REDC result: 0x00000035
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery mul result: 0x00000035
[DEBUG] mont_result after multiply: 0x00000035
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 1)
[MONT_MUL_COMPLETE] Montgomery multiplication
[DEBUG] a: 0x0000005c
[DEBUG] b: 0x0000005c
[DEBUG] a * b: 0x00002110
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x00002110
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...00002110 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00002110, n' = 0x055ee191, m = 0x9101ca10
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x51
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000051
[DEBUG] Final REDC result: 0x00000051
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery mul result: 0x00000051
[DEBUG] mont_base after square: 0x00000051
[MONT_EXP_COMPLETE] Bit 2 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[DEBUG] a: 0x00000035
[DEBUG] b: 0x00000051
[DEBUG] a * b: 0x000010c5
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x000010c5
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...000010c5 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x000010c5, n' = 0x055ee191, m = 0x101ca495
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x9
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000009
[DEBUG] Final REDC result: 0x00000009
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery mul result: 0x00000009
[DEBUG] mont_result after multiply: 0x00000009
[MONT_EXP_COMPLETE] Converting result back from Montgomery form
[MONT_FROM_COMPLETE] Converting from Montgomery form
[DEBUG] Montgomery input: 0x00000009
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x00000009
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...00000009 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000009, n' = 0x055ee191, m = 0x3055ee19
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1b
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x0000001b
[DEBUG] Final REDC result: 0x0000001b
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Normal form result: 0x0000001b
[DEBUG] Final exponentiation result: 0x0000001b
[MONT_EXP_COMPLETE] ‚úÖ Complete Montgomery exponentiation finished
[rsa_4096_encrypt:197] Encryption completed successfully
   Encrypted: 27
[rsa_4096_decrypt:203] Decrypting message using RSA-4096
[rsa_4096_decrypt:247] Using Montgomery exponentiation for decryption
[MONT_EXP_COMPLETE] Complete Montgomery exponentiation
[DEBUG] Base: 0x0000001b
[DEBUG] Exponent: 0x00000067
[DEBUG] Modulus: 0x0000008f
[MONT_TO_COMPLETE] Converting to Montgomery form
[DEBUG] Input a: 0x0000001b
[DEBUG] R^2 mod n: 0x00000071
[DEBUG] a * R^2: 0x00000beb
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x00000beb
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...00000beb (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000beb, n' = 0x055ee191, m = 0x01ca4b1b
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000001
[DEBUG] Final REDC result: 0x00000001
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery form result: 0x00000001
[MONT_TO_COMPLETE] Converting to Montgomery form
[DEBUG] Input a: 0x00000001
[DEBUG] R^2 mod n: 0x00000071
[DEBUG] a * R^2: 0x00000071
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x00000071
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...00000071 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000071, n' = 0x055ee191, m = 0x5ee19101
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x35
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000035
[DEBUG] Final REDC result: 0x00000035
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery form result: 0x00000035
[MONT_EXP_COMPLETE] Starting square-and-multiply
[DEBUG] Initial mont_base: 0x00000001
[DEBUG] Initial mont_result (1): 0x00000035
[MONT_EXP_COMPLETE] Processing 7 exponent bits
[MONT_EXP_COMPLETE] Bit 0 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[DEBUG] a: 0x00000035
[DEBUG] b: 0x00000001
[DEBUG] a * b: 0x00000035
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x00000035
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...00000035 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000035, n' = 0x055ee191, m = 0x1ca4b305
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x10
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000010
[DEBUG] Final REDC result: 0x00000010
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery mul result: 0x00000010
[DEBUG] mont_result after multiply: 0x00000010
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 0)
[MONT_MUL_COMPLETE] Montgomery multiplication
[DEBUG] a: 0x00000001
[DEBUG] b: 0x00000001
[DEBUG] a * b: 0x00000001
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x00000001
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...00000001 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000001, n' = 0x055ee191, m = 0x055ee191
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x3
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000003
[DEBUG] Final REDC result: 0x00000003
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery mul result: 0x00000003
[DEBUG] mont_base after square: 0x00000003
[MONT_EXP_COMPLETE] Progress: bit 0/7 (0.0%)
[MONT_EXP_COMPLETE] Bit 1 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[DEBUG] a: 0x00000010
[DEBUG] b: 0x00000003
[DEBUG] a * b: 0x00000030
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x00000030
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...00000030 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000030, n' = 0x055ee191, m = 0x01ca4b30
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000001
[DEBUG] Final REDC result: 0x00000001
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery mul result: 0x00000001
[DEBUG] mont_result after multiply: 0x00000001
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 1)
[MONT_MUL_COMPLETE] Montgomery multiplication
[DEBUG] a: 0x00000003
[DEBUG] b: 0x00000003
[DEBUG] a * b: 0x00000009
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x00000009
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...00000009 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000009, n' = 0x055ee191, m = 0x3055ee19
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1b
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x0000001b
[DEBUG] Final REDC result: 0x0000001b
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery mul result: 0x0000001b
[DEBUG] mont_base after square: 0x0000001b
[MONT_EXP_COMPLETE] Bit 2 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[DEBUG] a: 0x00000001
[DEBUG] b: 0x0000001b
[DEBUG] a * b: 0x0000001b
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x0000001b
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...0000001b (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000001b, n' = 0x055ee191, m = 0x9101ca4b
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x51
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000051
[DEBUG] Final REDC result: 0x00000051
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery mul result: 0x00000051
[DEBUG] mont_result after multiply: 0x00000051
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 2)
[MONT_MUL_COMPLETE] Montgomery multiplication
[DEBUG] a: 0x0000001b
[DEBUG] b: 0x0000001b
[DEBUG] a * b: 0x000002d9
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x000002d9
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...000002d9 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x000002d9, n' = 0x055ee191, m = 0x4b3055e9
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x2a
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x0000002a
[DEBUG] Final REDC result: 0x0000002a
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery mul result: 0x0000002a
[DEBUG] mont_base after square: 0x0000002a
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 3)
[MONT_MUL_COMPLETE] Montgomery multiplication
[DEBUG] a: 0x0000002a
[DEBUG] b: 0x0000002a
[DEBUG] a * b: 0x000006e4
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x000006e4
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...000006e4 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x000006e4, n' = 0x055ee191, m = 0x01ca4b24
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000001
[DEBUG] Final REDC result: 0x00000001
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery mul result: 0x00000001
[DEBUG] mont_base after square: 0x00000001
[MONT_EXP_COMPLETE] Squaring base for next bit (bit 4)
[MONT_MUL_COMPLETE] Montgomery multiplication
[DEBUG] a: 0x00000001
[DEBUG] b: 0x00000001
[DEBUG] a * b: 0x00000001
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x00000001
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...00000001 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000001, n' = 0x055ee191, m = 0x055ee191
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x3
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000003
[DEBUG] Final REDC result: 0x00000003
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery mul result: 0x00000003
[DEBUG] mont_base after square: 0x00000003
[MONT_EXP_COMPLETE] Bit 5 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[DEBUG] a: 0x00000051
[DEBUG] b: 0x00000003
[DEBUG] a * b: 0x000000f3
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x000000f3
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...000000f3 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x000000f3, n' = 0x055ee191, m = 0x19101ca3
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0xe
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x0000000e
[DEBUG] Final REDC result: 0x0000000e
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery mul result: 0x0000000e
[MONT_MUL_COMPLETE] Montgomery multiplication
[DEBUG] a: 0x00000003
[DEBUG] b: 0x00000003
[DEBUG] a * b: 0x00000009
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x00000009
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...00000009 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000009, n' = 0x055ee191, m = 0x3055ee19
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x1b
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x0000001b
[DEBUG] Final REDC result: 0x0000001b
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery mul result: 0x0000001b
[MONT_EXP_COMPLETE] Bit 6 is set, multiplying result by base
[MONT_MUL_COMPLETE] Montgomery multiplication
[DEBUG] a: 0x0000000e
[DEBUG] b: 0x0000001b
[DEBUG] a * b: 0x0000017a
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x0000017a
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...0000017a (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x0000017a, n' = 0x055ee191, m = 0xee19101a
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x85
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000085
[DEBUG] Final REDC result: 0x00000085
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Montgomery mul result: 0x00000085
[MONT_EXP_COMPLETE] Converting result back from Montgomery form
[MONT_FROM_COMPLETE] Converting from Montgomery form
[DEBUG] Montgomery input: 0x00000085
[REDC_COMPLETE] Starting Complete Montgomery REDC
[DEBUG] Input T: 0x00000085
[REDC_COMPLETE] Working with A: 12 words
[DEBUG] Initial A: 0x00000000...00000085 (12 words, 353 bits)
[REDC_COMPLETE] === Iteration 1/1 ===
[REDC_COMPLETE] A[0] = 0x00000085, n' = 0x055ee191, m = 0xca4b3055
[REDC_COMPLETE]   pos=0: A[0] = 0x00000000, carry=0x71
[REDC_COMPLETE] After iteration 1: A has 12 words
[DEBUG] A after iteration: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Main REDC loop completed
[DEBUG] A after main loop: 0x00000000...00000000 (12 words, 353 bits)
[REDC_COMPLETE] Dividing by R (right shift by 1 words)
[DEBUG] Result before final reduction: 0x00000071
[DEBUG] Final REDC result: 0x00000071
[REDC_COMPLETE] ‚úÖ Complete Montgomery REDC finished successfully
[DEBUG] Normal form result: 0x00000071
[DEBUG] Final exponentiation result: 0x00000071
[MONT_EXP_COMPLETE] ‚úÖ Complete Montgomery exponentiation finished
[rsa_4096_decrypt:264] Decryption completed successfully
   Decrypted: 113
‚ùå Large key test FAILED
make: *** [Makefile:64: run_basic_tests] Error 255